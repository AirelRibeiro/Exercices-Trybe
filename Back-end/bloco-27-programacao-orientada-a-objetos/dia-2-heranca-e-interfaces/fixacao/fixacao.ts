// Para fixar:
// Com base no exemplo do exerc√≠cio anterior:

// Comente a cria√ß√£o da inst√¢ncia da Superclass.

// Comente a chamada da fun√ß√£o que recebe o objeto do tipo Superclass como argumento.

// Fa√ßa a fun√ß√£o receber n√£o mais um objeto da Superclass, mas sim da Subclass.

// Crie, na Subclass, um m√©todo p√∫blico chamado sayHello2.

// Chame o m√©todo sayHello dentro do m√©todo sayHello2.

// Mude a visibilidade do m√©todo sayHello de public para protected.

// Ao mudar a visibilidade, o compilador (ou o vs code) vai mostrar um erro. Conserte esse erro utilizando o novo m√©todo sayHello2.

// Mude a visibilidade do m√©todo sayHello de protected para private. O que acontece?


class Superclass {					
  public isSuper: boolean;				
  constructor() {
    this.isSuper = true;
  }

  protected sayHello(): void{
    console.log('Ol√° mundo!');
  }
}

class Subclass extends Superclass {
  constructor() {
    super();
    this.isSuper = false;
  }

  public sayHello2() {
    this.sayHello();
  }
}

function myFunc(objeto: Subclass) {
  objeto.sayHello2();
}

class Animal {
  constructor(protected birthDate: Date) { }
}
class Bird extends Animal {
  constructor(public name: string) {
    super(new Date()); // Refer√™ncia ao construtor da SuperClass
  }
}

// Para fixar:
// Crie uma interface chamada MyInterface.

// MyInterface deve possuir um atributo myNumber do tipo number.

// MyInterface deve possuir um m√©todo myFunc, que recebe um par√¢metro myParam do tipo number e retorna uma string.

// Crie uma classe MyClass que implementa MyInterface.

// Fa√ßa o atributo myNumber ser inicializado diretamente nos par√¢metros do construtor da MyClass.

// Fa√ßa o m√©todo myFunc somar o myNumber com o myParam e retornar uma string qualquer que contenha a soma.

// Crie um objeto da classe MyClass e o utilize acessando myNumber e chamando myFunc.

interface MyInterface {
  myNumber: number;
  myFunc(param: number): string;
}

class MyClass implements MyInterface {
  
  constructor(public myNumber: number) {}

  myFunc(param: number): string {
    return `${this.myNumber + param}`;
  }

}

const myObject = new MyClass(2);
console.log(myObject.myNumber);
console.log(myObject.myFunc(4));

// Para fixar:
// Crie uma interface Logger.

// Logger deve possuir um m√©todo log, que recebe um par√¢metro do tipo string e n√£o retorna nada (void).

interface Logger {
  log(param: string): void; 
}

// Crie uma classe ConsoleLogger que implementa Logger. Voc√™ deve imaginar como o m√©todo log deve ser implementado, n√©? üòÅ.

class ConsoleLogger implements Logger {
  // constructor() {}

  public log(param: string): void{
    console.log(param);  
  }
}

// Crie uma classe ConsoleLogger2 igual √† classe anterior, apenas a t√≠tulo de exemplo.

class ConsoleLogger2 {
  // constructor() {}

  public log(param: string): void{
    console.log(`param: ${param}`);
  }
}

// No console.log dentro do m√©todo log, diferencie o ConsoleLogger2 do ConsoleLogger.

// Crie uma interface Database.

interface Database {
  logger: Logger;
  save(key: string, value: string): void;
}

// Database deve possuir um atributo do tipo Logger.

// Database deve possuir um m√©todo save, que recebe dois par√¢metros, key e value, ambos strings, e n√£o retorna nada (void).

// Crie uma classe ExampleDatabase que implementa Database.
class ExampleDatabase implements Database {
  public logger: Logger;
  constructor(logger: Logger = new ConsoleLogger()) {
    this.logger = logger;
  }

  save(key: string, value: string) {
    this.logger.log(`${key}: ${value}`);
  }
}

// ExampleDatabase deve receber o Logger como par√¢metro do construtor, e possuir como valor padr√£o um ConsoleLogger.

// Dentro do m√©todo save, chame a fun√ß√£o log do Logger passado para o database para fazer o log dos par√¢metros passados para a save.

// Crie um objeto de cada um dos Loggers.

const newLogger = new ConsoleLogger();
const newLogger2 = new ConsoleLogger2();

// Crie tr√™s objetos da ExampleDatabase, cada um dos dois primeiros recebendo um dos Loggers, e o √∫ltimo n√£o recebendo nenhum.
const example = new ExampleDatabase(newLogger);
const example2 = new ExampleDatabase(newLogger2);
const exampleVoid = new ExampleDatabase();

// Utilize todos eles para salvar um conte√∫do fict√≠cio.

example.save('chave 1', 'valor 1');
example2.save('chave 2', 'valor 2');
exampleVoid.save('chave 3', 'valor 3');
