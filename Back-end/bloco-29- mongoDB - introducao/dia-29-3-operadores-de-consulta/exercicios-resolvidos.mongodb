use('cinema');

// Utilizando o operador $all, retorne todos os filmes que contenham action e adventure no array category.

db.movies.find({ category: { $all: ['action', 'adventure'] } });

// ðŸš€ Agora retorne os filmes que contenham action e sci-fi no array category e possuem nota do IMDB maior do que 7.

db.movies.find({ $and: [
  { category: { $all: ['action', 'sci-fi'] } },
  { imdbRating: { $gt: 7 } }
] });

// SoluÃ§Ã£o do course, sem $and
// db.movies.find(
//   {
//     category: {
//       $all: ["action", "sci-fi"]
//     },
//     imdbRating: { $gt: 7 }
//   }
// ).pretty();

// Retorne todos os filmes com ratings maior do que 103, exibindo apenas os campos title e ratings.

db.movies.find({ ratings: { $elemMatch: { $gt: 103 } } }, { title: 1, ratings: 1, _id: 0 });

// ðŸš€ Retorne todos os filmes com ratings entre 100 e 105, exibindo apenas os campos title e ratings.

db.movies.find({ ratings: { $elemMatch: { $gte: 100, $lte: 105 } } }, { title: 1, ratings: 1, _id: 0 });

// ðŸš€ Retorne todos os filmes com ratings entre 64 e 105 e divisÃ­veis por 9, exibindo apenas os campos title e ratings.

db.movies.find({ ratings: { $elemMatch: { $gte: 64, $lte: 105, $mod: [9, 0] } } }, { title: 1, ratings: 1, _id: 0 });

// Retorne os filmes da categoria adventure e com ratings maior do que 103, exibindo apenas os campos title, ratings e category.

db.movies.find({
  category: { $all: ['adventure'] },
  ratings: { $elemMatch: { $gt: 103 } }
}, { title: 1, ratings: 1, category: 1, _id: 0 });

// Retorne somente o tÃ­tulo de todos os filmes com dois elementos no array category.

db.movies.find({ category: { $size: 2 } }, { title: 1, _id: 0 });

// ðŸš€ Retorne somente o tÃ­tulo de todos os filmes com quatro elementos no array ratings.

db.movies.find({ ratings: { $size: 4 } }, { title: 1, _id: 0 });


// Busque os filmes em que o mÃ³dulo 5 do campo budget seja 0 e que o array category tenha tamanho 2.

db.movies.find({ budget: { $mod: [5, 0] }, category: { $size: 2 } });

// ðŸš€ Retorne os filmes da categoria "sci-fi" ou que possua o ratings maior do que 199, exibindo apenas os campos title, ratings e category.

db.movies.find({ $or: [
  { category: { $all: ['sci-fi'] } },
  { ratings: { $elemMatch: { $gt: 199 } } }
] }, { title: 1, ratings: 1, category: 1, _id: 0 });

// Retorne os filmes em que o ratings possua tamanho 4 e que seja da category "adventure" ou "family", mas que nÃ£o tenha o imdbRating menor que 7.

// Observe o uso do $in; ele Ã© usado no lugar do $all porque pode conter qualquer um dos dois, nÃ£o precisa conter od dois juntos.

db.movies.find({ $and: [
  { ratings: { $size: 4 } },
  { category: { $in: ['adventure', 'family'] } },
  { imdbRating: { $not: { $lt: 7 } } }
] });

// ðŸš€ Utilizando o operador $regex, retorne todos os filmes em que a descriÃ§Ã£o comece com a palavra "The".

db.movies.find({ description: { $regex: /^The/ } }).explain("executionStats");

// Utilizando o operador $regex, retorne todos os filmes em que a descriÃ§Ã£o termine com a palavra "humanity.".

db.movies.find({ description: { $regex: /humanity.$/ } });
